# sleigh specification file for GameBoy (LR35902)

define endian=little;
define alignment=1;

define space ram     type=ram_space      size=2  default;
define space io      type=ram_space      size=2;
@define PTRSIZE  "2"

# Area in address space of IO and IE
@define IO_OFFSET "0xff00"

define space register type=register_space size=1;

define register offset=0x00 size=1 [ F A C B E D L H ];
define register offset=0x00 size=2 [ AF  BC  DE  HL ];
define register offset=0x20 size=1 [ F_ A_ C_ B_ E_ D_ L_ H_ ]; # Alternate registers
define register offset=0x20 size=2 [ AF_   BC_   DE_   HL_ ]; # Alternate registers
define register offset=0x40 size=2 [ _  PC SP ];

# Fake Registers used for pcode control
define register offset=0x60 size=1 [
    DECOMPILE_MODE
];

# Flag bits (?? manual is very confusing - could be typos!)
@define C_flag "F[4,1]" # C: Carry
@define H_flag "F[5,1]" # H: Half Carry
@define N_flag "F[6,1]" # N: Add/Subtract - used by DAA to distinguish between ADD and SUB instructions (0=ADD,1=SUB)
@define Z_flag "F[7,1]" # Z: Zero

define token opbyte (8)
    op0_8        = (0,7)
    op6_2        = (6,7)
    dRegPair4_2  = (4,5)
    sRegPair4_2  = (4,5)
    qRegPair4_2  = (4,5)
    reg3_3       = (3,5)
    bits3_3      = (3,5)
    bits0_4      = (0,3)
    reg0_3       = (0,2)
    bits0_3      = (0,2)
;

define token data8 (8)
    imm8  = (0,7)
    sign8 = (7,7)
    simm8 = (0,7) signed
;

define token data16 (16)
    timm4  = (12,15)
    imm16  = ( 0,15)
    sign16 = (15,15)
    simm16 = ( 0,15) signed
;

# value 6 (0b110) is '_' => not valid or false
attach variables [ reg0_3 reg3_3 ] [ B C D E H L _ A ];

attach variables [ sRegPair4_2 dRegPair4_2 ] [ BC DE HL SP ];

attach variables [ qRegPair4_2 ] [ BC DE HL AF ];

################################################################
# Psuedo Instructions
################################################################

define pcodeop segment; # Define special pcodeop that calculates the RAM address
# given the segment selector and offset as input

define pcodeop BCDadjust;
define pcodeop BCDadjustCarry;

define pcodeop disableMaskableInterrupts;
define pcodeop enableMaskableInterrupts;
define pcodeop halt;
define pcodeop stop;

################################################################
# Macros
################################################################

macro setZeroFlag(result) {
    $(Z_flag) = (result == 0);
}

macro additionFlags(operand1, operand2) {
    local AFmask = -1 >> 4;
    $(H_flag) = (((operand1 & AFmask) + (operand2 & AFmask)) & (AFmask + 1)) != 0;
    $(N_flag) = 0;
    $(C_flag) = carry(operand1, operand2);
}

macro additionWithCarry(operand1, operand2, result) {
    local Ccopy = zext($(C_flag));
    local AFmask = -1 >> 4;
    $(H_flag) = (((operand1 & AFmask) + (operand2 & AFmask) + Ccopy) & (AFmask + 1)) != 0;
    $(N_flag) = 0;
    $(C_flag) = carry(operand1, operand2);
    local tempResult = operand1 + operand2;
    $(C_flag) = $(C_flag) || carry(tempResult, Ccopy);
    result = tempResult + Ccopy;
}

macro push16(val16) {
    SP = SP - 2;
    *:2 SP = val16; 
}

macro pop16(ret16) {
    ret16 = *:2 SP;
    SP = SP + 2; 
}

macro MemRead(dest,off) {
    ptr:$(PTRSIZE) = off;
    dest = *:1 ptr;
}

################################################################

Addr16: imm16  is imm16      { export *:1 imm16; }

Off8: +^simm8  is sign8=0 & simm8 { export simm8; }
Off8: simm8  is sign8=1 & simm8 { export simm8; }

################################################################

# Opcode (0xF8)
:LD HL,SP^Off8  is op0_8=0xf8 & HL & SP; Off8 {
    additionFlags(SP, Off8);
    $(Z_flag) = 0;
    HL = SP + Off8;
}

# Opcode 0xCD (not used in the exercise)
:CALL Addr16        is op0_8=0xcd; Addr16 {
    push16(&:2 inst_next);
    call Addr16;
}

# Opcodes: (0xC5), 0xD5, 0xE5, 0xF5
:PUSH qRegPair4_2   is op6_2=0x3 & qRegPair4_2 & bits0_4=0x5 {
    push16(qRegPair4_2);
}

# Opcodes: (0x46), (0x4E), 0x56, 0x5E, 0x66, 0x6E, 0x7E
:LD reg3_3,(HL)     is op6_2=0x1 & reg3_3 & bits0_3=0x6 & HL {
    MemRead(reg3_3,HL);
}

# Opcodes: 0x03, 0x13, (0x23), 0x33
:INC sRegPair4_2    is op6_2=0x0 & sRegPair4_2 & bits0_4=0x3 {
    sRegPair4_2 = sRegPair4_2 + 1;
}

# Opcodes: 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, (0x47)
#          0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, (0x4F)
#          (0x50), 0x51, 0x52, 0x53, 0x54, 0x55, 0x57
#          0x58, (0x59), 0x5A, 0x5B, 0x5C, 0x5D, 0x5F
#          0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x67
#          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6F
#          (0x78), (0x79), 0x7A, 0x7B, 0x7C, 0x7D, 0x7F
:LD reg3_3,reg0_3   is op6_2=0x1 & reg3_3 & reg0_3 {
    reg3_3 = reg0_3;
}

# Opcode (0xC6)
:ADD A, imm8           is op0_8=0xc6; imm8 & A {
    local A_temp = A;

    A = A + imm8;
    setZeroFlag(A);
    additionFlags(A_temp, imm8);
}

# Opcode (0xCE)
:ADC A, imm8           is op0_8=0xce; imm8 & A {
    additionWithCarry(A, imm8, A);
    setZeroFlag(A);
}

# Opcodes: (0xC1), 0xD1, 0xE1, 0xF1
:POP qRegPair4_2    is op6_2=0x3 & qRegPair4_2 & bits0_4=0x1 {
    pop16(qRegPair4_2);
}

# Opccode (0xC9)
:RET                is op0_8=0xc9 {
    pop16(PC);
    ptr:$(PTRSIZE) = PC;
    return [ptr];
}
